#!/usr/bin/env python2
# -*- coding: utf-8 -*-

import click
import pyhrf
from pyhrf.ndarray import xndarray
from pyhrf.ndarray import split_and_save
from pyhrf.tools import add_suffix
import os


def verbose_levels():
    return "\n".join(["{} - {}".format(k, v)
                      for k, v in pyhrf.verbose_levels.items()])


@click.group()
@click.option('--verbose', default=0, type=int, help=verbose_levels())
def nii(verbose):
    pyhrf.logger.setLevel(verbose)


@nii.command('split')
@click.option('--output-dir', default=None, help='Output directory. Default is the directory containing the input file')
@click.argument('filename', nargs=1)
@click.argument('axes', nargs=-1)
def nii_split(filename, axes, output_dir):
    """Split nifti file along given axes"""
    if output_dir is not None and not os.path.exists(output_dir):
        os.makedirs(output_dir)

    c = xndarray.load(filename)

    split_and_save(c, axes, filename, output_dir=output_dir, format_dvalues=True)


@nii.command('mean')
@click.option('--output', default=None, help='Output file name. Default is: <input filename>_mean_<axis>.png')
@click.argument('filename', nargs=1)
@click.argument('axis', nargs=1)
def nii_mean(filename, axis, output):
    """Compute the volume mean along a given axis"""
    cfunc = xndarray.load(filename)

    cfunc = cfunc.mean(axis)

    if output is None:
        output = add_suffix(filename, '_mean_{}'.format(axis))

    cfunc.save(output)


@nii.command('std')
@click.option('--output', default=None, help='Output file name. Default is: <input filename>_mean_<axis>.png')
@click.argument('filename', nargs=1)
@click.argument('axis', nargs=1)
def nii_std(filename, axis, output):
    """Compute the volume std along a given axis"""
    cfunc = xndarray.load(filename)

    cfunc = cfunc.std(axis)

    if output is None:
        output = add_suffix(filename, '_std_{}'.format(axis))

    cfunc.save(output)

if __name__ == '__main__':
    nii()